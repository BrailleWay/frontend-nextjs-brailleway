generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// Enums
// ===============================================

enum Genero {
  M
  F
  Outro
  Prefiro_nao_informar @map("Prefiro não informar")
}

enum TipoCartao {
  Credito @map("Crédito")
  Debito  @map("Débito")
}

enum PacientePlanoStatus {
  ativo
  cancelado
  expirado
}

enum TipoConta {
  Corrente
  Poupanca @map("Poupança")
}

enum FormatoArquivo {
  mp3
  wav
  ogg
}

enum NivelDificuldade {
  Iniciante
  Intermediario @map("Intermediário")
  Avancado      @map("Avançado")
}

enum ConsultaStatus {
  agendada
  em_andamento
  concluida
  cancelada
}

enum TipoArquivoLaudo {
  pdf
  docx
  odt
}

enum SalaChatStatus {
  ativa
  arquivada
}

enum RemetenteTipo {
  paciente
  medico
}

enum TipoMensagem {
  texto
  imagem
  arquivo
  audio
}

enum FaturaStatus {
  pendente
  paga
  falhou
  reembolsada
}


// ===============================================
// Models (Padronizados e Corrigidos)
// ===============================================

model PerfilAcesso {
  id        Int        @id @map("perfil_id")
  nome      String     @unique @db.VarChar(100)
  admins    Admin[]
  pacientes Paciente[]
  medicos   Medico[]

  @@map("PerfilAcesso")
}

model NivelAcessoPlano {
  id                Int                @id @map("nivelAcessoPlano_id")
  nome              String             @unique @db.VarChar(100)
  descricao         String             @db.Text
  planosAssinatura  PlanoAssinatura[]

  @@map("nivelAcessoPlano")
}

model Admin {
  id            Int           @id @default(autoincrement()) @map("admin_id")
  nome          String        @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  senha         String        @db.VarChar(255)
  telefone      String?       @db.VarChar(20)
  perfilId      Int?          @default(1) @map("perfil_id")
  ativo         Boolean?      @default(true)
  criadoEm      DateTime?     @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm  DateTime?     @updatedAt @map("atualizado_em") @db.Timestamp()

  perfilAcesso  PerfilAcesso? @relation(fields: [perfilId], references: [id]) // CORREÇÃO

  @@map("Admin")
}

model Paciente {
  id              Int               @id @default(autoincrement()) @map("paciente_id")
  nome            String            @db.VarChar(255)
  email           String            @unique @db.VarChar(255)
  telefone        String            @db.VarChar(255)
  dataNascimento  DateTime          @map("data_nascimento") @db.Date
  genero          Genero
  senha           String            @db.VarChar(255)
  perfilId        Int?              @default(2) @map("perfil_id")
  descricao       String?           @db.Text
  ativo           Boolean?          @default(true)
  criadoEm        DateTime?         @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm    DateTime?         @updatedAt @map("atualizado_em") @db.Timestamp()

  perfilAcesso    PerfilAcesso?     @relation(fields: [perfilId], references: [id]) // CORREÇÃO
  cartoes         CartaoPaciente[]
  planos          PacientePlano[]
  sessoesMeditacao SessaoMeditacao[]
  consultas       Consulta[]
  salasChat       SalaChat[]
  faturas         Fatura[]

  @@map("Paciente")
}

model CartaoPaciente {
  id                      Int        @id @default(autoincrement()) @map("cartaoPaciente_id")
  operadora               String     @db.VarChar(255)
  nomeTitular             String     @map("nome_titular") @db.VarChar(255)
  numeroCartaoCriptografado String     @map("numero_cartao_criptografado") @db.Text
  validadeMes             Int        @map("validade_mes")
  validadeAno             Int        @map("validade_ano")
  tipoCartao              TipoCartao @map("tipo_cartao")
  pacienteId              Int        @map("paciente_id")
  ativo                   Boolean?   @default(true)
  criadoEm                DateTime?  @default(now()) @map("criado_em") @db.Timestamp()

  paciente Paciente @relation(fields: [pacienteId], references: [id]) // CORREÇÃO

  @@map("CartaoPaciente")
}

model PlanoAssinatura {
  id                     Int             @id @default(autoincrement()) @map("planoAssinatura_id")
  nome                   String          @db.VarChar(255)
  descricao              String          @db.Text
  preco                  Decimal         @db.Decimal(10, 2)
  nivelAcessoPlanoId     Int             @map("nivelAcessoPlano_id")
  duracaoConsultaMinutos Int             @default(30) @map("duracao_consulta_minutos")
  limiteConsultas        Int             @map("limite_consultas")
  ativo                  Boolean?        @default(true)
  criadoEm               DateTime?       @default(now()) @map("criado_em") @db.Timestamp()

  nivelAcessoPlano       NivelAcessoPlano @relation(fields: [nivelAcessoPlanoId], references: [id]) // CORREÇÃO
  pacientesNoPlano       PacientePlano[]

  @@map("planoAssinatura")
}

model PacientePlano {
  id                   Int                 @id @default(autoincrement()) @map("pacientePlano_id")
  pacienteId           Int                 @map("paciente_id")
  planoAssinaturaId    Int                 @map("planoAssinatura_id")
  dataInicio           DateTime            @default(now()) @map("data_inicio") @db.Timestamp()
  dataFim              DateTime?           @map("data_fim") @db.Timestamp()
  consultasUtilizadas  Int?                @default(0) @map("consultas_utilizadas")
  status               PacientePlanoStatus? @default(ativo)

  paciente        Paciente        @relation(fields: [pacienteId], references: [id]) // CORREÇÃO
  planoAssinatura PlanoAssinatura @relation(fields: [planoAssinaturaId], references: [id]) // CORREÇÃO
  faturas         Fatura[]

  @@unique([pacienteId, planoAssinaturaId])
  @@map("pacientePlano")
}

model Especialidade {
  id                   Int      @id @map("especialidade_id")
  nome                 String   @unique @db.VarChar(255)
  descricao            String?  @db.Text
  areaAtuacao          String?  @map("area_atuacao") @db.VarChar(255)
  conselhoProfissional String?  @map("conselho_profissional") @db.VarChar(255)
  ativo                Boolean? @default(true)
  medicos              Medico[]

  @@map("Especialidade")
}

model Medico {
  id               Int                     @id @default(autoincrement()) @map("medico_id")
  nome             String                  @db.VarChar(255)
  crm              String                  @unique @db.VarChar(20)
  email            String                  @unique @db.VarChar(255)
  telefone         String                  @db.VarChar(255)
  especialidadeId  Int                     @map("especialidade_id")
  perfilId         Int?                    @default(3) @map("perfil_id")
  ativo            Boolean?                @default(true)
  criadoEm         DateTime?               @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm     DateTime?               @updatedAt @map("atualizado_em") @db.Timestamp()

  especialidade    Especialidade           @relation(fields: [especialidadeId], references: [id]) // CORREÇÃO
  perfilAcesso     PerfilAcesso?           @relation(fields: [perfilId], references: [id]) // CORREÇÃO
  dadosBancarios   DadosBancariosMedico[]
  disponibilidades DisponibilidadeMedico[]
  bloqueiosAgenda  BloqueioAgenda[]
  consultas        Consulta[]
  laudosEmitidos   Laudo[]
  salasChat        SalaChat[]

  @@map("Medico")
}

model DadosBancariosMedico {
  id           Int       @id @default(autoincrement()) @map("dadosBancariosMedico_id")
  medicoId     Int       @map("medico_id")
  tipoConta    TipoConta @map("tipo_conta")
  banco        String    @db.VarChar(100)
  agencia      String    @db.VarChar(10)
  conta        String    @db.VarChar(20)
  digitoConta  String?   @map("digito_conta") @db.VarChar(2)
  pix          String?   @db.VarChar(255)
  ativo        Boolean?  @default(true)
  criadoEm     DateTime? @default(now()) @map("criado_em") @db.Timestamp()

  medico Medico @relation(fields: [medicoId], references: [id]) // CORREÇÃO
  
  @@unique([medicoId, tipoConta, agencia, conta])
  @@map("dadosBancariosMedico")
}

model DisponibilidadeMedico {
  id          Int       @id @default(autoincrement()) @map("disponibilidade_id")
  medicoId    Int       @map("medico_id")
  diaSemana   Int       @map("dia_semana")
  horaInicio  DateTime  @map("hora_inicio") @db.Time()
  horaFim     DateTime  @map("hora_fim") @db.Time()
  disponivel  Boolean   @default(true)
  criadoEm    DateTime? @default(now()) @map("criado_em") @db.Timestamp()

  medico Medico @relation(fields: [medicoId], references: [id]) // CORREÇÃO

  @@unique([medicoId, diaSemana, horaInicio, horaFim], name: "uk_medico_horario")
  @@index([medicoId, diaSemana], name: "idx_disponibilidade_medico")
  @@map("disponibilidadeMedico")
}

model BloqueioAgenda {
  id        Int      @id @default(autoincrement()) @map("bloqueio_id")
  medicoId  Int      @map("medico_id")
  dataInicio DateTime @map("data_inicio") @db.Timestamp()
  dataFim   DateTime @map("data_fim") @db.Timestamp()
  motivo    String?  @db.Text
  criadoEm  DateTime @default(now()) @map("criado_em") @db.Timestamp()

  medico Medico @relation(fields: [medicoId], references: [id]) // CORREÇÃO

  @@index([medicoId, dataInicio, dataFim])
  @@map("BloqueioAgenda")
}

model Fatura {
  id                 Int          @id @default(autoincrement()) @map("fatura_id")
  pacienteId         Int          @map("paciente_id")
  pacientePlanoId    Int?         @map("paciente_plano_id")
  valor              Decimal      @db.Decimal(10, 2)
  status             FaturaStatus @default(pendente)
  dataVencimento     DateTime     @map("data_vencimento") @db.Date
  dataPagamento      DateTime?    @map("data_pagamento") @db.Timestamp()
  gatewayTransacaoId String?      @unique @map("gateway_transacao_id")

  paciente        Paciente       @relation(fields: [pacienteId], references: [id]) // CORREÇÃO
  pacientePlano   PacientePlano? @relation(fields: [pacientePlanoId], references: [id]) // CORREÇÃO

  @@index([pacienteId])
  @@index([status])
  @@map("Fatura")
}

model FrequenciaSonora {
  id              Int         @id @default(autoincrement()) @map("frequenciaSonora_id")
  nome            String      @db.VarChar(255)
  descricao       String      @db.Text
  hz              Decimal     @db.Decimal(10, 2)
  caminhoArquivo  String      @map("caminho_arquivo") @db.Text
  formatoArquivo  FormatoArquivo @map("formato_arquivo")
  duracaoSegundos Int?        @map("duracao_segundos")
  ativo           Boolean?    @default(true)
  criadoEm        DateTime?   @default(now()) @map("criado_em") @db.Timestamp()
  meditacoes      Meditacao[]

  @@map("FrequenciaSonora")
}

model Meditacao {
  id                 Int               @id @default(autoincrement()) @map("meditacao_id")
  nome               String            @db.VarChar(255)
  descricao          String            @db.Text
  duracaoMinutos     Int               @map("duracao_minutos")
  frequenciaSonoraId Int               @map("frequenciaSonora_id")
  nivelDificuldade   NivelDificuldade? @map("nivel_dificuldade")
  ativo              Boolean?          @default(true)
  criadoEm           DateTime?         @default(now()) @map("criado_em") @db.Timestamp()

  frequenciaSonora FrequenciaSonora @relation(fields: [frequenciaSonoraId], references: [id]) // CORREÇÃO
  sessoes          SessaoMeditacao[]

  @@map("Meditacao")
}

model SessaoMeditacao {
  id                 Int       @id @default(autoincrement()) @map("sessaoMeditacao_id")
  pacienteId         Int       @map("paciente_id")
  meditacaoId        Int       @map("meditacao_id")
  dataInicio         DateTime  @default(now()) @map("data_inicio") @db.Timestamp()
  dataFim            DateTime? @map("data_fim") @db.Timestamp()
  duracaoRealMinutos Int?      @map("duracao_real_minutos")
  concluida          Boolean?  @default(false)

  paciente  Paciente  @relation(fields: [pacienteId], references: [id]) // CORREÇÃO
  meditacao Meditacao @relation(fields: [meditacaoId], references: [id]) // CORREÇÃO

  @@index([pacienteId], name: "idx_sessao_meditacao_paciente")
  @@map("sessaoMeditacao")
}

model Consulta {
  id              Int            @id @default(autoincrement()) @map("consulta_id")
  pacienteId      Int            @map("paciente_id")
  medicoId        Int            @map("medico_id")
  dataHora        DateTime       @map("data_hora") @db.Timestamp()
  duracaoMinutos  Int?           @default(30) @map("duracao_minutos")
  resumo          String?        @db.Text
  status          ConsultaStatus? @default(agendada)
  observacoes     String?        @db.Text
  criadoEm        DateTime?      @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm    DateTime?      @updatedAt @map("atualizado_em") @db.Timestamp()

  paciente     Paciente      @relation(fields: [pacienteId], references: [id]) // CORREÇÃO
  medico       Medico        @relation(fields: [medicoId], references: [id]) // CORREÇÃO
  avaliacao    Avaliacao?
  laudos       Laudo[]
  videoChamada VideoChamada?
  salaChat     SalaChat[]

  @@index([dataHora], name: "idx_consulta_data")
  @@index([pacienteId], name: "idx_consulta_paciente")
  @@index([medicoId], name: "idx_consulta_medico")
  @@index([status], name: "idx_consulta_status")
  @@map("Consulta")
}

model Avaliacao {
  id          Int       @id @default(autoincrement()) @map("avaliacao_id")
  consultaId  Int       @unique @map("consulta_id")
  nota        Int
  comentario  String?   @db.Text
  criadoEm    DateTime? @default(now()) @map("criado_em") @db.Timestamp()

  consulta Consulta @relation(fields: [consultaId], references: [id]) // CORREÇÃO

  @@map("Avaliacao")
}

model Laudo {
  id                Int              @id @default(autoincrement()) @map("laudo_id")
  consultaId        Int              @map("consulta_id")
  nomeArquivo       String           @map("nome_arquivo") @db.VarChar(255)
  tipoArquivo       TipoArquivoLaudo @map("tipo_arquivo")
  caminhoArquivo    String           @map("caminho_arquivo") @db.Text
  tamanhoBytes      BigInt?          @map("tamanho_bytes")
  dataUpload        DateTime?        @default(now()) @map("data_upload") @db.Timestamp()
  dataEmissao       DateTime         @map("data_emissao") @db.Timestamp()
  medicoResponsavel Int              @map("medico_responsavel")

  consulta Consulta @relation(fields: [consultaId], references: [id]) // CORREÇÃO
  medico   Medico   @relation(fields: [medicoResponsavel], references: [id]) // CORREÇÃO

  @@map("Laudo")
}

model VideoChamada {
  id           Int       @id @default(autoincrement()) @map("videoChamada_id")
  consultaId   Int       @unique @map("consulta_id")
  urlExterna   String    @map("url_externa") @db.Text
  plataforma   String    @db.VarChar(100)
  salaId       String?   @map("sala_id") @db.VarChar(255)
  criadoEm     DateTime? @default(now()) @map("criado_em") @db.Timestamp()
  iniciadoEm   DateTime? @map("iniciado_em") @db.Timestamp()
  encerradoEm  DateTime? @map("encerrado_em") @db.Timestamp()

  consulta Consulta @relation(fields: [consultaId], references: [id]) // CORREÇÃO

  @@map("videoChamada")
}

model SalaChat {
  id          Int             @id @default(autoincrement()) @map("sala_id")
  pacienteId  Int             @map("paciente_id")
  medicoId    Int             @map("medico_id")
  consultaId  Int?            @map("consulta_id")
  status      SalaChatStatus? @default(ativa)
  criadoEm    DateTime?       @default(now()) @map("criado_em") @db.Timestamp()

  paciente  Paciente   @relation(fields: [pacienteId], references: [id]) // CORREÇÃO
  medico    Medico     @relation(fields: [medicoId], references: [id]) // CORREÇÃO
  consulta  Consulta?  @relation(fields: [consultaId], references: [id]) // CORREÇÃO
  mensagens Mensagem[]

  @@unique([pacienteId, medicoId])
  @@map("salaChat")
}

model Mensagem {
  id              Int           @id @default(autoincrement()) @map("mensagem_id")
  salaId          Int           @map("sala_id")
  remetenteTipo   RemetenteTipo @map("remetente_tipo")
  remetenteId     Int           @map("remetente_id")
  mensagem        String        @db.Text
  tipoMensagem    TipoMensagem  @default(texto) @map("tipo_mensagem")
  arquivoCaminho  String?       @map("arquivo_caminho") @db.Text
  lida            Boolean?      @default(false)
  enviadoEm       DateTime?     @default(now()) @map("enviado_em") @db.Timestamp()

  salaChat SalaChat @relation(fields: [salaId], references: [id]) // CORREÇÃO

  @@index([salaId], name: "idx_mensagem_sala")
  @@index([enviadoEm], name: "idx_mensagem_enviado")
  @@map("Mensagem")
}

// ===============================================
// Views (Corrigidas e Mapeadas)
// ===============================================

view VwPacientesAtivos {
  id                  Int       @id @map("paciente_id")
  nome                String
  email               String    @unique
  telefone            String
  dataNascimento      DateTime  @map("data_nascimento")
  genero              Genero
  senha               String
  perfilId            Int?      @map("perfil_id")
  descricao           String?
  ativo               Boolean?
  criadoEm            DateTime? @map("criado_em")
  atualizadoEm        DateTime? @map("atualizado_em")
  planoAssinaturaId   Int?      @map("planoAssinatura_id")
  nomePlano           String?   @map("nome_plano")
  consultasUtilizadas Int?      @map("consultas_utilizadas")
  limiteConsultas     Int?      @map("limite_consultas")
  consultasRestantes  Int?      @map("consultas_restantes")

  @@map("vw_pacientes_ativos")
}

view VwConsultasHoje {
  id              Int            @id @map("consulta_id")
  pacienteId      Int            @map("paciente_id")
  medicoId        Int            @map("medico_id")
  dataHora        DateTime       @map("data_hora")
  duracaoMinutos  Int?           @map("duracao_minutos")
  resumo          String?
  status          ConsultaStatus?
  observacoes     String?
  criadoEm        DateTime?      @map("criado_em")
  atualizadoEm    DateTime?      @map("atualizado_em")
  nomePaciente    String         @map("nome_paciente")
  nomeMedico      String         @map("nome_medico")
  especialidade   String

  @@map("vw_consultas_hoje")
}